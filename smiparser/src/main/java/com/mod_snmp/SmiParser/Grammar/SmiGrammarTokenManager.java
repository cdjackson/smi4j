/* Generated By:JavaCC: Do not edit this line. SmiGrammarTokenManager.java */
package com.mod_snmp.SmiParser.Grammar;

public class SmiGrammarTokenManager implements SmiGrammarConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400L) != 0L || (active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 118;
            return 8;
         }
         if ((active0 & 0x1800004038000000L) != 0L || (active1 & 0x2008000000L) != 0L)
         {
            jjmatchedKind = 118;
            return 49;
         }
         if ((active0 & 0xe7efbfbfc0007900L) != 0L || (active1 & 0xfe1ff7c101c1L) != 0L)
         {
            jjmatchedKind = 118;
            return 84;
         }
         if ((active1 & 0xfe3cL) != 0L)
         {
            jjmatchedKind = 117;
            return 85;
         }
         if ((active0 & 0x20L) != 0L)
            return 25;
         if ((active0 & 0x10400000000000L) != 0L || (active1 & 0xc000200002L) != 0L)
         {
            jjmatchedKind = 118;
            return 19;
         }
         return -1;
      case 1:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
            return 0;
         }
         if ((active0 & 0x1800000038000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
            return 48;
         }
         if ((active1 & 0xfe3cL) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
            return 85;
         }
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
            return 18;
         }
         if ((active0 & 0xe7ffffffc0007d00L) != 0L || (active1 & 0xfeffffc101c3L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
            return 84;
         }
         return -1;
      case 2:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
            return 17;
         }
         if ((active0 & 0x1800000038000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
            return 47;
         }
         if ((active0 & 0xe7ffffffc0007500L) != 0L || (active1 & 0xfeffffc101c3L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
            return 84;
         }
         if ((active1 & 0xfe3cL) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 2;
            return 85;
         }
         if ((active0 & 0x800L) != 0L)
            return 84;
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
            return 86;
         }
         return -1;
      case 3:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 3;
            return 16;
         }
         if ((active0 & 0xe7ffffffc0003500L) != 0L || (active1 & 0xfe7fffc10043L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 3;
            return 84;
         }
         if ((active1 & 0x7c3cL) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
            return 85;
         }
         if ((active1 & 0x8200L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active1 & 0x180L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x1800000038000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 3;
            return 46;
         }
         if ((active0 & 0x4000L) != 0L || (active1 & 0x8000020000L) != 0L)
            return 84;
         return -1;
      case 4:
         if ((active1 & 0xc63cL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return 85;
         }
         if ((active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 15;
         }
         if ((active0 & 0x1800000038000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 34;
         }
         if ((active1 & 0x3800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return 29;
         }
         if ((active0 & 0xc0200000000400L) != 0L || (active1 & 0x20003000000L) != 0L)
            return 84;
         if ((active0 & 0xe73fdfcfc0003100L) != 0L || (active1 & 0xfc7ffcc101c3L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 84;
         }
         if ((active0 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 3;
            }
            return 32;
         }
         return -1;
      case 5:
         if ((active1 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return 29;
         }
         if ((active0 & 0x1800000038000000L) != 0L)
            return 87;
         if ((active0 & 0x20000800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0xe30fd7f1c0003100L) != 0L || (active1 & 0xf87ff5c10181L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 5;
            }
            return 84;
         }
         if ((active1 & 0xbe3cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return 85;
         }
         if ((active0 & 0x410080600000000L) != 0L || (active1 & 0x40008000042L) != 0L)
            return 84;
         if ((active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 5;
            }
            return 14;
         }
         return -1;
      case 6:
         if ((active1 & 0x4L) != 0L)
            return 85;
         if ((active0 & 0xa22f57f9c0000100L) != 0L || (active1 & 0xd87f74000181L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 6;
            }
            return 84;
         }
         if ((active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 6;
            }
            return 10;
         }
         if ((active1 & 0xfe38L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 6;
            }
            return 85;
         }
         if ((active0 & 0x5100800000003000L) != 0L || (active1 & 0x200081c10000L) != 0L)
            return 84;
         if ((active0 & 0x638000000L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active1 & 0x10L) != 0L)
            return 85;
         if ((active1 & 0xfe28L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
            return 85;
         }
         if ((active1 & 0x200000L) != 0L)
            return 88;
         if ((active0 & 0x4200420000000000L) != 0L || (active1 & 0xc00000000000L) != 0L)
            return 84;
         if ((active0 & 0x802f117fb8000100L) != 0L || (active1 & 0x187ff4400181L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 7;
            return 84;
         }
         if ((active0 & 0x2000048040000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 6;
            }
            return 32;
         }
         return -1;
      case 8:
         if ((active1 & 0x820L) != 0L)
            return 85;
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 7;
            }
            return 32;
         }
         if ((active0 & 0xa02415eff8000100L) != 0L || (active1 & 0x87b60000180L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 8;
            return 84;
         }
         if ((active0 & 0x9001000000000L) != 0L || (active1 & 0x100494400001L) != 0L)
            return 84;
         if ((active1 & 0xf608L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 8;
            return 85;
         }
         return -1;
      case 9:
         if ((active1 & 0x5008L) != 0L)
            return 85;
         if ((active0 & 0x202605eff8000100L) != 0L || (active1 & 0x87860000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 9;
            return 84;
         }
         if ((active1 & 0xa600L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 9;
            return 85;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 8;
            }
            return 32;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x300000180L) != 0L)
            return 84;
         return -1;
      case 10:
         if ((active1 & 0x2000L) != 0L)
            return 85;
         if ((active1 & 0x8200L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 10;
            return 85;
         }
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 9;
            }
            return 29;
         }
         if ((active0 & 0x202614eff0000000L) != 0L || (active1 & 0x7020000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 10;
            return 84;
         }
         if ((active0 & 0x10008000100L) != 0L || (active1 & 0x80840000000L) != 0L)
            return 84;
         return -1;
      case 11:
         if ((active0 & 0x6140fd0000000L) != 0L || (active1 & 0x1020000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 11;
            return 84;
         }
         if ((active0 & 0x202000e020000000L) != 0L || (active1 & 0x6000000000L) != 0L)
            return 84;
         if ((active1 & 0x8600L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 11;
            return 85;
         }
         return -1;
      case 12:
         if ((active0 & 0x2140e50000000L) != 0L || (active1 & 0x1020000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 12;
            return 84;
         }
         if ((active1 & 0x8600L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 12;
            return 85;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 84;
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 11;
            }
            return 32;
         }
         return -1;
      case 13:
         if ((active1 & 0x8400L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 13;
            return 85;
         }
         if ((active1 & 0x200L) != 0L)
            return 85;
         if ((active0 & 0x2140fd0000000L) != 0L || (active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 13;
            return 84;
         }
         if ((active1 & 0x20000000L) != 0L)
            return 84;
         return -1;
      case 14:
         if ((active1 & 0x8000L) != 0L)
            return 85;
         if ((active0 & 0x2100dc0000000L) != 0L || (active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 14;
            return 84;
         }
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 13;
            }
            return 29;
         }
         if ((active0 & 0x40210000000L) != 0L)
            return 84;
         return -1;
      case 15:
         if ((active0 & 0x2000dc0000000L) != 0L || (active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 15;
            return 84;
         }
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 15;
            return 85;
         }
         if ((active0 & 0x100000000000L) != 0L)
            return 84;
         return -1;
      case 16:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 16;
            return 85;
         }
         if ((active0 & 0x2000480000000L) != 0L || (active1 & 0x1000000000L) != 0L)
            return 84;
         if ((active0 & 0x940000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 16;
            return 84;
         }
         return -1;
      case 17:
         if ((active0 & 0x940000000L) != 0L)
            return 84;
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 17;
            return 85;
         }
         return -1;
      case 18:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 18;
            return 85;
         }
         return -1;
      case 19:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 19;
            return 85;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 19);
      case 41:
         return jjStopAtPos(0, 20);
      case 44:
         return jjStopAtPos(0, 16);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 46:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 58:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 59:
         return jjStopAtPos(0, 24);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x200000800000000L, 0x81000000040L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x20000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2008000000000L, 0x40080c00000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2400010000000100L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000000000001800L, 0x400000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x3000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x4180800000002000L, 0x800c10010000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x180600000000L, 0x20000000180L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x4000180000000L, 0x60000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x1800004038000000L, 0x2008000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x200000000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x8020000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10400000000000L, 0xc000200002L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1040000000L, 0x4000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x100300000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x1L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 21);
      case 93:
         return jjStopAtPos(0, 22);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8200L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 123:
         return jjStopAtPos(0, 17);
      case 124:
         return jjStopAtPos(0, 23);
      case 125:
         return jjStopAtPos(0, 18);
      default :
         return jjMoveNfa_0(9, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 46:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1102000000000L, active1, 0x20000000081L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000038000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x408030040000500L, active1, 0x200000L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x8200020100L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000002000L, active1, 0x800000000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0c0800000000800L, active1, 0x100000010000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x4088780000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x22245000004000L, active1, 0x200000000000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x200400000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0x400000000000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000020L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000010L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20003808L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4004000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xd00000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80c08200L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1018000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(2, 9);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x10000002L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000800000000000L, active1, 0x20000000040L);
      case 68:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 84);
         return jjMoveStringLiteralDfa3_0(active0, 0x80080600000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000800000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x408000000000100L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x200004000000400L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0x300000000000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000038000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x10108000000000L, active1, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000004000L, active1, 0x40000000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000003000L, active1, 0xc80000000000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x1L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000012000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004000180000000L, active1, 0x30000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x80L);
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x48003800L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4004000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000020L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000008L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000010L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x420008200L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x83c00000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8380L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2004000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 84);
         return jjMoveStringLiteralDfa4_0(active0, 0x9888000038000000L, active1, 0x10040L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x5020180000500L, active1, 0x40000000001L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100800000000000L, active1, 0xc80000000000L);
      case 77:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 84);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000401000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000L);
      case 83:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 84);
         break;
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x7000a040000000L, active1, 0x2L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x280600000000L, active1, 0x200000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x300000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10003820L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2c04000400L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80c00000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4040000000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xcL);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200004000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000L, active1, 0x3800L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x411108000000000L, active1, 0x200040000181L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000038000000L, active1, 0x40000000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x220000000000000L, active1, 0x100000200000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000180000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0xc80000000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000080600000000L, active1, 0L);
      case 78:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 84);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000100L, active1, 0L);
      case 79:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 84);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 80:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 84);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x8008010000003000L, active1, 0L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 84);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x40L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000800000000L, active1, 0x4000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000840040000000L, active1, 0x2L);
      case 88:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x220L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L);
      case 101:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20100400cL);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x500000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000008000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000010L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80c00000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000800000000L, active1, 0x4000L);
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000040000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x48000000000L, active1, 0xc80000000180L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000800000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 84);
         return jjMoveStringLiteralDfa6_0(active0, 0x108000600000000L, active1, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x6034180000100L, active1, 0L);
      case 76:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 84);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x100000000000L);
      case 83:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 84);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 84);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L);
      case 84:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1001101038003000L, active1, 0x200000000000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 88:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 84);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000002208L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L);
      case 101:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 84);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4480c00010L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000004L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000020L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x638000000L, active1, 0L);
      case 50:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 84);
         break;
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000980000000L, active1, 0x200180L);
      case 68:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 84);
         break;
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 84);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0xc00000000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0x1L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x2120000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x12000000000L, active1, 0L);
      case 82:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 84);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 84);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 84);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 84);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x106000000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x200448000000100L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000001000000000L, active1, 0L);
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000008L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000200L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x310000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4020L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      case 114:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x480403000L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 85);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000048040000000L, active1, 0L);
      case 51:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400400000L);
      case 54:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x4004980000000L, active1, 0x100020000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000400000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 85, 88);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x181L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000210000100L, active1, 0L);
      case 78:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 84);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 84);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 84);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 84);
         break;
      case 84:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 84);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 111, 84);
         return jjMoveStringLiteralDfa8_0(active0, 0x10008000000L, active1, 0x80000000000L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000L);
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 85);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2200L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8800L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800004000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x240000020L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000008L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x6000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      case 50:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 86, 84);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 98, 84);
         break;
      case 51:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x300000000L);
      case 52:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 84);
         break;
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x210000000L, active1, 0L);
      case 69:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 84);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 84);
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x18000000000L, active1, 0x80000000000L);
      case 76:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 84);
         break;
      case 78:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000100L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x40020000000L, active1, 0L);
      case 83:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x180L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x4004180000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x100008000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40008008L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4400L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x6000000000L);
      case 115:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 90, 84);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 92, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800001000L);
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 85);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L);
      case 50:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 96, 84);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 97, 84);
         break;
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 69:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 63, 84);
         return jjMoveStringLiteralDfa10_0(active0, 0x40210000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x2004004180000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000100L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x10060000000L, active1, 0x80000000000L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(9, 71, 84);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 72, 84);
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x20002000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 85);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L);
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 85);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000200L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x6000002000L);
      case 121:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 78, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      case 69:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 84);
         return jjMoveStringLiteralDfa11_0(active0, 0x2002000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 40, 84);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 107, 84);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000250000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x4004180000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0L);
      case 83:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 84);
         break;
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x6000000000L);
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 77, 85);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L);
      case 115:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 94, 84);
         break;
      case 120:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 99, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 37, 84);
         break;
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L, active1, 0L);
      case 78:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 84);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000180000000L, active1, 0L);
      case 79:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 84);
         break;
      case 80:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 84);
         break;
      case 81:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000000L);
      case 84:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 61, 84);
         return jjMoveStringLiteralDfa12_0(active0, 0x210000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0L);
      case 88:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 53, 84);
         break;
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000L);
      case 120:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 101, 84);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 102, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x180000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x610000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 50, 84);
         break;
      case 85:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000800000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x290000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(13, 73, 85);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400L);
      case 115:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(13, 93, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400L);
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 42, 84);
         break;
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000100000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x840000000L, active1, 0L);
      case 89:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(14, 28, 84);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(14, 33, 84);
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L, active1, 0L);
      case 100:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(14, 79, 85);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x840000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L, active1, 0L);
      case 83:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 44, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(16, 31, 84);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(16, 34, 84);
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000L, active1, 0L);
      case 83:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 49, 84);
         break;
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x400L);
      case 120:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 100, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(17, 30, 84);
         break;
      case 80:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(17, 32, 84);
         break;
      case 83:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(17, 35, 84);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa20_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(20, 74, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 84;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(11, 13);
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(35, 45);
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 114)
                        kind = 114;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 39)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 48)
                  {
                     if (kind > 114)
                        kind = 114;
                  }
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(29);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(1, 7);
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 1:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(1, 7);
                  break;
               case 11:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(11, 13);
                  break;
               case 21:
                  if (curChar == 48 && kind > 114)
                     kind = 114;
                  break;
               case 22:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 45)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 31:
                  if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 35:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(35, 45);
                  break;
               case 51:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 61:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 7);
                  break;
               case 62:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 70);
                  break;
               case 70:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 75);
                  break;
               case 75:
                  if (curChar == 39)
                     jjAddStates(12, 13);
                  break;
               case 78:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 3);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 81);
                  break;
               case 80:
                  if (curChar == 34 && kind > 115)
                     kind = 115;
                  break;
               case 82:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar == 34 && kind > 116)
                     kind = 116;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 48:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 84:
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 88:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 87:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 9:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  if (curChar == 79)
                     jjAddStates(14, 15);
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 85:
               case 29:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 86:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 2:
                  if (curChar == 71 && kind > 82)
                     kind = 82;
                  break;
               case 3:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  if (curChar == 70 && kind > 84)
                     kind = 84;
                  break;
               case 13:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 27:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if (curChar == 79)
                     jjAddStates(14, 15);
                  break;
               case 36:
                  if (curChar == 82 && kind > 26)
                     kind = 26;
                  break;
               case 37:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 50:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 52:
                  if (curChar == 71 && kind > 83)
                     kind = 83;
                  break;
               case 53:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 59:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 71:
                  if (curChar == 66 && kind > 112)
                     kind = 112;
                  break;
               case 72:
                  if (curChar == 98 && kind > 112)
                     kind = 112;
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 76:
                  if (curChar == 72 && kind > 113)
                     kind = 113;
                  break;
               case 77:
                  if (curChar == 104 && kind > 113)
                     kind = 113;
                  break;
               case 81:
                  if (curChar == 90)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  jjAddStates(18, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 84 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar == 45 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   79, 81, 82, 83, 62, 73, 75, 70, 51, 57, 71, 72, 76, 77, 49, 60, 
   73, 75, 82, 83, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, 
"\104\105\106\111\116\111\124\111\117\116\123", "\72\72\75", "\102\105\107\111\116", "\105\116\104", 
"\105\130\120\117\122\124\123", "\111\115\120\117\122\124\123", "\106\122\117\115", "\56", "\54", "\173", 
"\175", "\50", "\51", "\133", "\135", "\174", "\73", "\72", null, 
"\117\102\112\105\103\124\55\124\131\120\105", "\117\102\112\105\103\124\55\111\104\105\116\124\111\124\131", 
"\117\102\112\105\103\124\55\107\122\117\125\120", "\124\105\130\124\125\101\114\55\103\117\116\126\105\116\124\111\117\116", 
"\116\117\124\111\106\111\103\101\124\111\117\116\55\124\131\120\105", "\116\117\124\111\106\111\103\101\124\111\117\116\55\107\122\117\125\120", 
"\115\117\104\125\114\105\55\111\104\105\116\124\111\124\131", "\115\117\104\125\114\105\55\103\117\115\120\114\111\101\116\103\105", 
"\101\107\105\116\124\55\103\101\120\101\102\111\114\111\124\111\105\123", "\124\122\101\120\55\124\131\120\105", 
"\114\101\123\124\55\125\120\104\101\124\105\104", "\117\122\107\101\116\111\132\101\124\111\117\116", 
"\103\117\116\124\101\103\124\55\111\116\106\117", "\104\105\123\103\122\111\120\124\111\117\116", 
"\122\105\126\111\123\111\117\116", "\120\122\117\104\125\103\124\55\122\105\114\105\101\123\105", 
"\115\117\104\125\114\105", "\115\101\116\104\101\124\117\122\131\55\107\122\117\125\120\123", 
"\107\122\117\125\120", "\123\125\120\120\117\122\124\123", "\111\116\103\114\125\104\105", 
"\126\101\122\111\101\124\111\117\116", "\103\122\105\101\124\111\117\116\55\122\105\121\125\111\122\105\123", 
"\116\117\124\111\106\111\103\101\124\111\117\116\123", "\122\105\106\105\122\105\116\103\105", "\123\131\116\124\101\130", 
"\127\122\111\124\105\55\123\131\116\124\101\130", "\125\116\111\124\123", "\111\116\104\105\130", 
"\111\115\120\114\111\105\104", "\101\125\107\115\105\116\124\123", "\104\105\106\126\101\114", 
"\117\102\112\105\103\124", "\117\102\112\105\103\124\123", 
"\104\111\123\120\114\101\131\55\110\111\116\124", "\111\116\103\114\125\104\105\123", 
"\105\116\124\105\122\120\122\111\123\105", "\126\101\122\111\101\102\114\105\123", "\123\124\101\124\125\123", 
"\143\165\162\162\145\156\164", "\144\145\160\162\145\143\141\164\145\144", 
"\157\142\163\157\154\145\164\145", "\155\141\156\144\141\164\157\162\171", "\101\103\103\105\123\123", 
"\115\101\130\55\101\103\103\105\123\123", "\115\111\116\55\101\103\103\105\123\123", 
"\156\157\164\55\141\143\143\145\163\163\151\142\154\145", 
"\141\143\143\145\163\163\151\142\154\145\55\146\157\162\55\156\157\164\151\146\171", "\162\145\141\144\55\157\156\154\171", 
"\162\145\141\144\55\167\162\151\164\145", "\162\145\141\144\55\143\162\145\141\164\145", 
"\167\162\151\164\145\55\157\156\154\171", "\156\157\164\55\151\155\160\154\145\155\145\156\164\145\144", 
"\111\116\124\105\107\105\122", "\102\111\124\123", null, null, null, "\123\105\121\125\105\116\103\105", 
"\103\157\165\156\164\145\162\63\62", "\103\157\165\156\164\145\162", "\107\141\165\147\145\63\62", 
"\107\141\165\147\145", "\124\151\155\145\124\151\143\153\163", "\117\160\141\161\165\145", 
"\111\160\101\144\144\162\145\163\163", "\116\145\164\167\157\162\153\101\144\144\162\145\163\163", 
"\116\123\141\160\101\144\144\162\145\163\163", "\103\157\165\156\164\145\162\66\64", 
"\125\156\163\151\147\156\145\144\63\62", "\125\111\156\164\145\147\145\162\63\62", 
"\111\156\164\145\147\145\162\63\62", "\111\156\144\145\170\123\171\156\164\141\170", 
"\101\160\160\154\151\143\141\164\151\157\156\123\171\156\164\141\170", "\117\142\152\145\143\164\123\171\156\164\141\170", 
"\123\151\155\160\154\145\123\171\156\164\141\170", "\123\111\132\105", "\56\56", "\115\101\103\122\117", 
"\103\110\117\111\103\105", "\101\120\120\114\111\103\101\124\111\117\116", 
"\125\116\111\126\105\122\123\101\114", "\120\122\111\126\101\124\105", "\105\130\120\114\111\103\111\124", 
"\111\115\120\114\111\103\111\124", null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinComment", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x7fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x60L, 0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[84];
private final int[] jjstateSet = new int[168];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SmiGrammarTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SmiGrammarTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 84; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
