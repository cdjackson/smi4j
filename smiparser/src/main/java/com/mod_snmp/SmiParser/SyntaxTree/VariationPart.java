//
// Generated by JTB 1.2.2++
//

package com.mod_snmp.SmiParser.SyntaxTree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;VARIATION_T&gt;
 * identifier -> ValueIdentifier()
 * syntaxPart -> SyntaxPart()
 * write_syntax -> [ &lt;WRITE_SYNTAX_T&gt; Types() ]
 * access -> [ Access() ]
 * creation_requires -> [ &lt;CREATION_REQUIRES_T&gt; &lt;LEFT_BRACE_T&gt; ObjectList() &lt;RIGHT_BRACE_T&gt; ]
 * defValPart -> DefValPart()
 * descriptionPart -> DescriptionPart()
 * </PRE>
 */
public class VariationPart implements Node {
    private Node parent;
    public Identifier identifier;
    public NodeOptional syntaxPart;
    public NodeOptional write_syntax;
    public NodeOptional access;
    public NodeOptional creation_requires;
    public DefValPart defValPart;
    public DescriptionPart descriptionPart;

    public VariationPart(Identifier n0, NodeOptional n1, NodeOptional n2, NodeOptional n3, NodeOptional n4, DefValPart n5, DescriptionPart n6) {
        identifier = n0;
        if ( identifier != null ) identifier.setParent(this);
        syntaxPart = n1;
        if ( syntaxPart != null ) syntaxPart.setParent(this);
        write_syntax = n2;
        if ( write_syntax != null ) write_syntax.setParent(this);
        access = n3;
        if ( access != null ) access.setParent(this);
        creation_requires = n4;
        if ( creation_requires != null ) creation_requires.setParent(this);
        defValPart = n5;
        if ( defValPart != null ) defValPart.setParent(this);
        descriptionPart = n6;
        if ( descriptionPart != null ) descriptionPart.setParent(this);
    }
    public int line() {
        return identifier.line();
    }
    public void accept(com.mod_snmp.SmiParser.Visitor.Visitor v) {
        v.visit(this);
    }
    public Object accept(com.mod_snmp.SmiParser.Visitor.ObjectVisitor v, Object argu) {
        return v.visit(this,argu);
    }
    public void setParent(Node n) { parent = n; }
    public Node getParent()       { return parent; }
}

