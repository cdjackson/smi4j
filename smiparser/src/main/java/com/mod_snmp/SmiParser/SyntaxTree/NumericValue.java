//
// Generated by JTB 1.2.2++
//

package com.mod_snmp.SmiParser.SyntaxTree;

/**
 * Grammar production:
 * <PRE>
 * value -> &lt;DEC_NUMBER_T&gt;
 *       | &lt;BIN_NUMBER_T&gt;
 *       | &lt;HEX_NUMBER_T&gt;
 * </PRE>
 */
public class NumericValue implements Node {
    private Node parent;
    public NodeToken value;
    private long nval;

    public NumericValue(NodeToken n0) {
        value = n0;
        if ( value != null ) value.setParent(this);
        parseValue(value.toString());
    }
    public NumericValue(long nr) {
        /* Create a NodeToken for visit function. */
        parent = null;
        value = new NodeToken(nr + "");
        nval = nr;
    }
    public String toString() {
        return value.toString();
    }
    public int line() {
        return value.line();
    }
    public long getValue() {
        return nval;
    }
    public void parseValue(String str_value) {
        try {
            if ((-1 != str_value.indexOf('b'))
                                || (-1 != str_value.indexOf('B'))) {
                str_value = str_value.replace('B', ' ');
                str_value = str_value.replace('b', ' ');
                str_value = str_value.replace('\'', ' ');
                str_value = str_value.trim();
                nval = Long.parseLong(str_value, 2);
            } else if ((-1 != str_value.indexOf('h'))
                                || (-1 != str_value.indexOf('H'))) {
                str_value = str_value.replace('H', ' ');
                str_value = str_value.replace('h', ' ');
                str_value = str_value.replace('\'', ' ');
                str_value = str_value.trim();
                nval = Long.parseLong(str_value, 16);
            } else {
                nval = Long.parseLong(str_value, 10);
            }
        } catch (Exception e) {
            nval = -1;
        }
    }


    public void accept(com.mod_snmp.SmiParser.Visitor.Visitor v) {
        v.visit(this);
    }
    public Object accept(com.mod_snmp.SmiParser.Visitor.ObjectVisitor v, Object argu) {
        return v.visit(this,argu);
    }
    public void setParent(Node n) { parent = n; }
    public Node getParent()       { return parent; }
}

