//
// Generated by JTB 1.2.2++
//

package com.mod_snmp.SmiParser.SyntaxTree;

import com.mod_snmp.SmiParser.Grammar.SmiGrammarConstants;

/**
 * Grammar production:
 * <PRE>
 * base -> &lt;INTEGER_T&gt; [ RestrictionNamedNumberList | RestrictionRange() ]
 *       | &lt;INTEGER32_T&gt; [ RestrictionNamedNumberList | RestrictionRange() ]
 *       | &lt;UINTEGER32_T&gt; [ RestrictionNamedNumberList | RestrictionRange() ]
 *       | &lt;UNSIGNED32_T&gt; [ RestrictionNamedNumberList | RestrictionRange() ]
 *       | &lt;BITS_T&gt; [ RestrictionNamedNumberList() ]
 *       | &lt;BIT_STRING_T&gt; [ RestrictionNamedNumberList() ]
 *       | &lt;OCTET_STRING_T&gt; [ RestrictionSize() ]
 *       | &lt;OBJECT_IDENTIFIER_T&gt;
 *       | &lt;COUNTER_T&gt;
 *       | &lt;COUNTER32_T&gt;
 *       | &lt;COUNTER64_T&gt;
 *       | &lt;GAUGE_T&gt; [ RestrictionNamedNumberList | RestrictionRange() ]
 *       | &lt;GAUGE32_T&gt; [ RestrictionNamedNumberList | RestrictionRange() ]
 *       | &lt;TIMETICKS_T&gt;
 *       | &lt;OPAQUE_T&gt; [ RestrictionSize() ]
 *       | &lt;NSAP_ADDRESS_T&gt;
 *       | &lt;IP_ADDRESS_T&gt;
 *       | &lt;NETWORK_ADDRESS_T&gt;
 * </PRE>
 */
public class TypeSmi implements Type {
    public final static int INTEGER = SmiGrammarConstants.INTEGER_T;
    public final static int INTEGER32 = SmiGrammarConstants.INTEGER32_T;
    public final static int UINTEGER32 = SmiGrammarConstants.UINTEGER32_T;
    public final static int UNSIGNED32 = SmiGrammarConstants.UNSIGNED32_T;
    public final static int BITS = SmiGrammarConstants.BITS_T;
    public final static int BIT_STRING = SmiGrammarConstants.BIT_STRING_T;
    public final static int OCTET_STRING = SmiGrammarConstants.OCTET_STRING_T;
    public final static int OBJECT_IDENTIFIER = SmiGrammarConstants.OBJECT_IDENTIFIER_T;
    public final static int COUNTER = SmiGrammarConstants.COUNTER_T;
    public final static int COUNTER32 = SmiGrammarConstants.COUNTER32_T;
    public final static int COUNTER64 = SmiGrammarConstants.COUNTER64_T;
    public final static int GAUGE = SmiGrammarConstants.GAUGE_T;
    public final static int GAUGE32 = SmiGrammarConstants.GAUGE32_T;
    public final static int TIMETICKS = SmiGrammarConstants.TIMETICKS_T;
    public final static int OPAQUE = SmiGrammarConstants.OPAQUE_T;
    public final static int NSAP_ADDRESS = SmiGrammarConstants.NSAP_ADDRESS_T;
    public final static int IP_ADDRESS = SmiGrammarConstants.IP_ADDRESS_T;
    public final static int NETWORK_ADDRESS = SmiGrammarConstants.NETWORK_ADDRESS_T;

    private Node parent;
    public NodeToken base;
    public NodeOptional restriction;

    public TypeSmi(NodeToken n0) {
        base = n0;
        if ( base != null ) base.setParent(this);
        restriction = new NodeOptional();
    }
    public void addRestriction(Node n0) {
        restriction.addNode(n0);
    }
    public boolean restrictionPresent() {
        return restriction.present();
    }
    public String toString() {
        return base.toString();
    }
    public int line() {
        return base.line();
    }
    public void accept(com.mod_snmp.SmiParser.Visitor.Visitor v) {
        v.visit(this);
    }
    public Object accept(com.mod_snmp.SmiParser.Visitor.ObjectVisitor v, Object argu) {
        return v.visit(this,argu);
    }
    public void setGenericType(Type type) {
        /* These are really the generic types. */
    }
    public Type getGenericType() {
        return this;
    }
    public boolean isGenericType() {
        return true;
    }
    public int getKind() {
        return base.kind;
    }
    public void setParent(Node n) { parent = n; }
    public Node getParent()       { return parent; }
}

