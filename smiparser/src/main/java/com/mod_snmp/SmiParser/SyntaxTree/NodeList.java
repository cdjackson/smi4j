//
// Generated by JTB 1.2.2++
//

package com.mod_snmp.SmiParser.SyntaxTree;

import java.util.Enumeration;
import java.util.Vector;

/**
 * Represents a grammar list, e.g. ( A )*
 */
public class NodeList implements NodeListInterface {
    public NodeList() {
        nodes = new Vector();
    }

    public NodeList(Node firstNode) {
        nodes = new Vector();
        addNode(firstNode);
    }

    public void addNode(Node n) {
        if (n != null) {
            nodes.addElement(n);
            n.setParent(this);
        }
    }
    public String toString() {
        return nodes.toString();
    }
    public String toCommaListString() {
        if (nodes.size() > 0) {
            String str =  ((Node)nodes.firstElement()).toString();
            for (int i = 1; i < nodes.size() ; i++) {
                str +=  ", " + ((Node)nodes.elementAt(i)).toString();
            }
            return str;
        }
        return "";
    }
    public int line() {
        if (nodes.size() > 0) {
            return ((Node)nodes.firstElement()).line();
        } else {
            return 0;
        }
    }
    public Enumeration elements() { return nodes.elements(); }
    public Node elementAt(int i)  { return (Node)nodes.elementAt(i); }
    public Node firstElement()    { return (Node)nodes.firstElement(); }
    public Node lastElement()     { return (Node)nodes.lastElement(); }
    public int size()             { return nodes.size(); }
    public boolean present()      { return (nodes.size() > 0); }
    public void accept(com.mod_snmp.SmiParser.Visitor.Visitor v) {
        v.visit(this);
    }
    public Object accept(com.mod_snmp.SmiParser.Visitor.ObjectVisitor v, Object argu) {
        return v.visit(this,argu);
    }

    public void setParent(Node n) { parent = n; }
    public Node getParent()       { return parent; }

    private Node parent;
    public Vector nodes;
}

